#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-
# generated by wxGlade 0.6.5 (standalone edition) on Sun Mar 03 19:42:48 2013

import wx
import wx.grid
import wx.html
from wxPython.wx import *
import wx.gizmos

import Main
import sys
import time
import mp3play

SysPath = sys.path[0]

if SysPath[-3:] == "exe":
    x = SysPath.rfind("\\")
    IconPath = SysPath[:x] + "\\Icons\\"
    IconPath = IconPath.replace("\\","\\\\")
else:
    SysPath = sys.path[0].replace("\\","\\\\")
    IconPath = SysPath + "\\\\Icons\\\\"

# begin wxGlade: extracode
# end wxGlade


class BibTaskBarIcon(wx.TaskBarIcon):
    def __init__(self, frame):
        wx.TaskBarIcon.__init__(self)
        self.frame = frame
#        icon = wx.Icon("C:\\Users\\Lief-W7\\Desktop\\Dropbox\\Python\\Work\\CustomIcons\\16 pixel\\3G.ico", wx.BITMAP_TYPE_ICO)
        icon = wx.Icon(IconPath + "3G-16.ico", wx.BITMAP_TYPE_ICO)        
        self.SetIcon(icon, "3G - DBA Helper")

    def CreatePopupMenu(self):
        self.menu = wx.Menu()
        self.menu.Append(wx.NewId(), "dummy menu ")
        self.menu.Append(wx.NewId(), "exit")
        return self.menu



class MGUI(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MGUI.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        
        Rclicks = [ "Transfer" ]
        self.RClickDic = {}
        for title in Rclicks:
            self.RClickDic[ wxNewId() ] = title        
        self.RCNode = ""
        self.cEvent = ""
        self.cEventTime = 0.0
        favicon = wx.Icon(IconPath + "3G-16.ico", wx.BITMAP_TYPE_ICO )
        self.SetIcon(favicon)
        self.tbicon = BibTaskBarIcon(self)
        wx.EVT_TASKBAR_LEFT_UP(self.tbicon, self.OnTaskBarLeftClick)
        self.cicon = ""
        self.image_list    = wx.ImageList(16, 16)
        self.iconFILE      = self.image_list.Add(wx.Image(IconPath + "FILE-16.png", wx.BITMAP_TYPE_PNG).ConvertToBitmap())
        self.iconHEADING   = self.image_list.Add(wx.Image(IconPath + "HEADING-16.png", wx.BITMAP_TYPE_PNG).ConvertToBitmap())
        self.iconITEM      = self.image_list.Add(wx.Image(IconPath + "ITEM-16.png", wx.BITMAP_TYPE_PNG).ConvertToBitmap())
        self.iconJOBS      = self.image_list.Add(wx.Image(IconPath + "JOBS-16.png", wx.BITMAP_TYPE_PNG).ConvertToBitmap())
        self.iconLABEL     = self.image_list.Add(wx.Image(IconPath + "LABEL-16.png", wx.BITMAP_TYPE_PNG).ConvertToBitmap())
        self.iconMETHOD    = self.image_list.Add(wx.Image(IconPath + "METHOD-16.png", wx.BITMAP_TYPE_PNG).ConvertToBitmap())
        self.iconPODETL    = self.image_list.Add(wx.Image(IconPath + "PODETL-16.png", wx.BITMAP_TYPE_PNG).ConvertToBitmap())
        self.iconPORDER    = self.image_list.Add(wx.Image(IconPath + "PORDER-16.png", wx.BITMAP_TYPE_PNG).ConvertToBitmap())
        self.iconSALES     = self.image_list.Add(wx.Image(IconPath + "SALES-16.png", wx.BITMAP_TYPE_PNG).ConvertToBitmap())
        self.iconSUBITEM   = self.image_list.Add(wx.Image(IconPath + "SUBITEM-16.png", wx.BITMAP_TYPE_PNG).ConvertToBitmap())
        self.iconXML       = self.image_list.Add(wx.Image(IconPath + "XML-16.png", wx.BITMAP_TYPE_PNG).ConvertToBitmap())
        self.icon3G        = self.image_list.Add(wx.Image(IconPath + "3G-16.ico", wx.BITMAP_TYPE_ICO).ConvertToBitmap())
        self.iconERROR     = self.image_list.Add(wx.Image(IconPath + "Error-16.png", wx.BITMAP_TYPE_PNG).ConvertToBitmap())
        self.iconTRANSFER  = self.image_list.Add(wx.Image(IconPath + "Transfer-16.png", wx.BITMAP_TYPE_PNG).ConvertToBitmap())
        
        self.statusnow = self.statuspassed = self.statusthen = 0
        self.eventnow = self.eventpassed = self.eventthen = 0

        # Menu Bar
        self.MainGUI_menubar = wx.MenuBar()
        
        self.File = wx.Menu()
        self.MOpen_XML = wx.MenuItem(self.File, wx.NewId(), "Open XML File", "", wx.ITEM_NORMAL)
        self.File.AppendItem(self.MOpen_XML)
        self.MSave_XML = wx.MenuItem(self.File, wx.NewId(), "Save XML File", "", wx.ITEM_NORMAL)
        self.File.AppendItem(self.MSave_XML)
        self.MOpen_DBA = wx.MenuItem(self.File, wx.NewId(), "Open DBA", "", wx.ITEM_NORMAL)
        self.File.AppendItem(self.MOpen_DBA)
        self.MExit = wx.MenuItem(self.File, wx.NewId(), "Exit", "", wx.ITEM_NORMAL)
        self.File.AppendItem(self.MExit)
        self.MainGUI_menubar.Append(self.File, "File")
        
        self.MDBA = wx.Menu()
        self.MExecute = wx.MenuItem(self.MDBA, wx.NewId(), "Execute", "Execute Planned Tasks", wx.ITEM_NORMAL)
        self.MDBA.AppendItem(self.MExecute)
        self.MSales = wx.MenuItem(self.MDBA, wx.NewId(), "Sales", "Examine Sales Orders", wx.ITEM_NORMAL)
        self.MDBA.AppendItem(self.MSales)
        self.MProduction = wx.MenuItem(self.MDBA, wx.NewId(), "Production", "Examine Production Orders", wx.ITEM_NORMAL)
        self.MDBA.AppendItem(self.MProduction)
        self.MEngineering = wx.MenuItem(self.MDBA, wx.NewId(), "Engineering", "Examine Engineering", wx.ITEM_NORMAL)
        self.MDBA.AppendItem(self.MEngineering)
        self.MTiming = wx.MenuItem(self.MDBA, wx.NewId(), "Timing", "Examing Timing", wx.ITEM_NORMAL)
        self.MDBA.AppendItem(self.MTiming)
        self.MainGUI_menubar.Append(self.MDBA, "DBA")
        self.SetMenuBar(self.MainGUI_menubar)
        
        self.MHelp = wx.Menu()
        self.MHelp_Help = wx.MenuItem(self.MHelp, wx.NewId(), "Display Help","",wx.ITEM_NORMAL)
        self.MHelp.AppendItem(self.MHelp_Help)        
        self.MainGUI_menubar.Append(self.MHelp, "Help")
        # Menu Bar end
        
        # Tool Bar
        self.MainGUI_toolbar = wx.ToolBar(self, -1)
        self.SetToolBar(self.MainGUI_toolbar)
        self.tb1 = self.MainGUI_toolbar.AddLabelTool(wx.NewId(), "Open XML", wx.Bitmap(IconPath + "XML-24.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Open a XML File", "")
        self.tb2 = self.MainGUI_toolbar.AddLabelTool(wx.NewId(), "Open DBA", wx.Bitmap(IconPath + "DBA-24.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Open DBA Database", "")
        self.tb3 = self.MainGUI_toolbar.AddLabelTool(wx.NewId(), "Save_XML", wx.Bitmap(IconPath + "Save-24.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Save a XML File", "")
        self.MainGUI_toolbar.AddSeparator()
        self.tb4 = self.MainGUI_toolbar.AddLabelTool(wx.NewId(), "Execute", wx.Bitmap(IconPath + "Transfer-24.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Transfer Items/BOMS", "")
        self.tb5 = self.MainGUI_toolbar.AddLabelTool(wx.NewId(), "Sales", wx.Bitmap(IconPath + "Sales-24.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "View Sales Orders", "")
        self.tb6 = self.MainGUI_toolbar.AddLabelTool(wx.NewId(), "Production", wx.Bitmap(IconPath + "Production-24.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Examine Production", "")
        self.tb7 = self.MainGUI_toolbar.AddLabelTool(wx.NewId(), "Engineering", wx.Bitmap(IconPath + "Engineering-24.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Examine Engineering", "")
        self.tb8 = self.MainGUI_toolbar.AddLabelTool(wx.NewId(), "Timing", wx.Bitmap(IconPath + "Timing-24.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Examine Timing Analysis", "")
        self.MainGUI_toolbar.AddSeparator()
        self.tb9 = self.MainGUI_toolbar.AddLabelTool(wx.NewId(), "Exit", wx.Bitmap(IconPath + "Exit-24.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Exit Application", "")
        # Tool Bar end
        
        
        self.MainVert_TreeAndTabs = wx.Notebook(self, -1, style=wx.NB_BOTTOM)
        self.Tree_Items_Divider = wx.SplitterWindow(self.MainVert_TreeAndTabs, -1, style=wx.SP_3D | wx.SP_BORDER)
        self.Tree_Items_Divider.SetSashPosition(200)
        self.Tree_Panel = wx.Panel(self.Tree_Items_Divider, -1)
        self.Tree = wx.TreeCtrl(self.Tree_Panel, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_EDIT_LABELS | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER | wx.TR_HIDE_ROOT)
        self.Tree.AssignImageList(self.image_list)
        self.panel_2 = wx.Panel(self.Tree_Items_Divider, -1)
        self.text_path = wx.TextCtrl(self.panel_2, -1, "Path:", style=wx.TE_READONLY)
        self.text_xpath = wx.TextCtrl(self.panel_2, -1, "XPATH:", style=wx.TE_PROCESS_ENTER)
        self.text_expansion = wx.TextCtrl(self.panel_2, -1, "Expansion")
        self.Tree_Tabs = wx.Notebook(self.panel_2, -1, style=0)
        self.XMLGrid = wx.grid.Grid(self.Tree_Tabs, -1, size=(1, 1))
        self.notebook_1_pane_2 = wx.Panel(self.Tree_Tabs, -1)
        self.combo_box = [ ]
        self.combo_box.append(wx.ComboBox(self.notebook_1_pane_2, -1, choices=["", "ITEMCODE", "DESCRIPT", "CATEGORY", "PRICE", "NOTE", "PICTURE", "QTYONHAND"], style=wx.CB_DROPDOWN))
        self.combo_box.append(wx.ComboBox(self.notebook_1_pane_2, -1, choices=["=", "<>", ">", "<", ">=", "<=", "BETWEEN", "LIKE", "IN"], style=wx.CB_DROPDOWN))
        self.combo_box.append(wx.ComboBox(self.notebook_1_pane_2, -1, choices=[], style=wx.CB_DROPDOWN))
        self.combo_box.append(wx.ComboBox(self.notebook_1_pane_2, -1, choices=[], style=wx.CB_DROPDOWN))
        self.combo_box.append(wx.ComboBox(self.notebook_1_pane_2, -1, choices=["=", "<>", ">=", "<=", "BETWEEN", "LIKE", "IN"], style=wx.CB_DROPDOWN))
        self.combo_box.append(wx.ComboBox(self.notebook_1_pane_2, -1, choices=[], style=wx.CB_DROPDOWN))
        self.combo_box.append(wx.ComboBox(self.notebook_1_pane_2, -1, choices=[], style=wx.CB_DROPDOWN))
        self.combo_box.append(wx.ComboBox(self.notebook_1_pane_2, -1, choices=["=", "<>", ">", "<", ">=", "<=", "BETWEEN", "LIKE", "IN"], style=wx.CB_DROPDOWN))
        self.combo_box.append(wx.ComboBox(self.notebook_1_pane_2, -1, choices=[], style=wx.CB_DROPDOWN))
        self.Filter = wx.Button(self.notebook_1_pane_2, -1, "Filter")
        self.Add = wx.Button(self.notebook_1_pane_2, -1, "Add")
        self.DBAGrid = wx.grid.Grid(self.notebook_1_pane_2, -1, size=(1, 1))
        
        self.Display_TABS = wx.Notebook(self.Tree_Tabs, -1, style=0)
        self.Display_HTML = wx.html.HtmlWindow(self.Display_TABS , wx.ID_ANY, style=wx.NO_BORDER)
        self.Display_Source = wx.TextCtrl(self.Display_TABS, -1, "Source Code To Go Here", style=wx.TE_PROCESS_ENTER | wx.TE_MULTILINE)
        self.Display_Jinja = wx.TextCtrl(self.Display_TABS, -1, "", style=wx.TE_PROCESS_ENTER | wx.TE_MULTILINE)        

        self.Tree_Tabs_pane_4 = wx.Panel(self.Tree_Tabs, -1)
        
        
#        self.Tree_Tabs_pane_5 = wx.Panel(self.Tree_Tabs, -1)
        self.JobTabList = [ ] 
        self.JobTabList.append( wx.Notebook(self.Tree_Tabs, -1, style=wx.NB_LEFT) )
        
#        self.TrainingTab = wx.Notebook(self.JobTab, -1, style=0)
#        self.TrainingStation1Grid = wx.grid.Grid(self.TrainingTab, -1, size=(1, 1))
#        self.TrainingStation2Grid = wx.grid.Grid(self.TrainingTab, -1, size=(1, 1))
#        self.MainTab = wx.Notebook(self.JobTab, -1, style=0)
#        self.MainStation1Grid = wx.grid.Grid(self.MainTab, -1, size=(1, 1))
#        self.MainStation2Grid = wx.grid.Grid(self.MainTab, -1, size=(1, 1))
        
#        self.TrainingTab.AddPage(self.TrainingStation1Grid, "Station1")
#        self.TrainingTab.AddPage(self.TrainingStation2Grid, "Station2")
#        self.MainTab.AddPage(self.MainStation1Grid, "Station1")
#        self.MainTab.AddPage(self.MainStation2Grid, "Station2")
#        self.JobTab.AddPage(self.TrainingTab, "Training")
#        self.JobTab.AddPage(self.MainTab, "Main")
        
#        self.TrainingStation1Grid.CreateGrid(10, 3)
#        self.TrainingStation1Grid.SetRowLabelSize(20)
#        self.TrainingStation1Grid.SetColLabelSize(20)
#        self.TrainingStation2Grid.CreateGrid(10, 3)
#        self.TrainingStation2Grid.SetRowLabelSize(20)
#        self.TrainingStation2Grid.SetColLabelSize(20)
#        self.MainStation1Grid.CreateGrid(10, 3)
#        self.MainStation1Grid.SetRowLabelSize(20)
#        self.MainStation1Grid.SetColLabelSize(20)
#        self.MainStation2Grid.CreateGrid(10, 3)
#        self.MainStation2Grid.SetRowLabelSize(20)
#        self.MainStation2Grid.SetColLabelSize(20)        

        self.Tree_Tabs_pane_6 = wx.Panel(self.Tree_Tabs, -1)
  
    
        self.Export = wx.Notebook(self.Tree_Tabs, -1, style=wx.NB_LEFT)
        self.T_M = wx.Notebook(self.Export, -1, style=0)
        self.TM_INTree = wx.gizmos.TreeListCtrl(self.T_M, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_HIDE_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)
        self.TM_INTree.AssignImageList(self.image_list)
        self.TM_IUTree = wx.gizmos.TreeListCtrl(self.T_M, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_HIDE_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)
        self.TM_IUTree.AssignImageList(self.image_list)        
        self.TM_IMTree = wx.gizmos.TreeListCtrl(self.T_M, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_HIDE_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)
        self.TM_IMTree.AssignImageList(self.image_list)        
        self.TM_ICTree = wx.gizmos.TreeListCtrl(self.T_M, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_HIDE_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)
        self.TM_ICTree.AssignImageList(self.image_list)        

        self.M_T = wx.Notebook(self.Export, -1, style=0)
        self.MT_INTree = wx.gizmos.TreeListCtrl(self.M_T, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_HIDE_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)
        self.MT_INTree.AssignImageList(self.image_list)        
        self.MT_IUTree = wx.gizmos.TreeListCtrl(self.M_T, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_HIDE_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)
        self.MT_IUTree.AssignImageList(self.image_list)          
        self.MT_IMTree = wx.gizmos.TreeListCtrl(self.M_T, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_HIDE_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)
        self.MT_IMTree.AssignImageList(self.image_list)          
        self.MT_ICTree = wx.gizmos.TreeListCtrl(self.M_T, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_HIDE_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)        
        self.MT_ICTree.AssignImageList(self.image_list)          
        
        self.Vslider = wx.Slider(self.panel_2, -1, 0, 0, 10, style=wx.SL_VERTICAL | wx.SL_AUTOTICKS)
        self.Hslider = wx.Slider(self.panel_2, -1, 0, 0, 10, style=wx.SL_HORIZONTAL | wx.SL_AUTOTICKS)
        self.HPos = wx.TextCtrl(self.panel_2, -1, "1/10")
        self.StatusEdit = wx.TextCtrl(self.MainVert_TreeAndTabs, -1, style = wx.TE_MULTILINE|wx.TE_READONLY|wx.TE_AUTO_URL )
        self.StatusEdit.SetValue("Init..")

        self.Event_Edit = wx.TextCtrl(self.MainVert_TreeAndTabs, -1, style = wx.TE_MULTILINE|wx.TE_READONLY|wx.TE_AUTO_URL )        
        self.Error_Edit = wx.TextCtrl(self.MainVert_TreeAndTabs, -1,  style = wx.TE_MULTILINE|wx.TE_READONLY|wx.TE_AUTO_URL ) 
        self.Settings_Pane = wx.Panel(self.MainVert_TreeAndTabs, -1)
        self.Status_Text = wx.TextCtrl(self, -1, style = wx.TE_READONLY|wx.TE_AUTO_URL|wx.TE_RICH2)
        self.Progress_Top = wx.Gauge(self, -1, 10)
        self.Progress_Bottom = wx.Gauge(self, -1, 10)
        self.Time_Left = wx.TextCtrl(self, -1, "", style=wx.TE_PROCESS_ENTER)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_CLOSE, self.EH_Exit)
        self.Bind(wx.EVT_MENU, self.EH_OpenXML, id=self.MOpen_XML.GetId())
        self.Bind(wx.EVT_MENU, self.EH_SaveXML, id=self.MSave_XML.GetId())
        self.Bind(wx.EVT_MENU, self.EH_OpenDBA, id=self.MOpen_DBA.GetId())
        self.Bind(wx.EVT_MENU, self.EH_Exit, id=self.MExit.GetId())
        self.Bind(wx.EVT_MENU, self.EV_Execute, id=self.MExecute.GetId())
        self.Bind(wx.EVT_MENU, self.EH_Sales, id=self.MSales.GetId())
        self.Bind(wx.EVT_MENU, self.EH_Productiion, id=self.MProduction.GetId())
        self.Bind(wx.EVT_MENU, self.EH_Engineering, id=self.MEngineering.GetId())
        self.Bind(wx.EVT_MENU, self.EH_Timing, id=self.MTiming.GetId())
        self.Bind(wx.EVT_TOOL, self.EH_OpenXML, id=self.tb1.GetId())
        self.Bind(wx.EVT_TOOL, self.EH_OpenDBA, id=self.tb2.GetId())
        self.Bind(wx.EVT_TOOL, self.EH_SaveXML, id=self.tb3.GetId())
        self.Bind(wx.EVT_TOOL, self.EH_Execute, id=self.tb4.GetId())
        self.Bind(wx.EVT_TOOL, self.EH_Sales, id=self.tb5.GetId())
        self.Bind(wx.EVT_TOOL, self.EH_Production, id=self.tb6.GetId())
        self.Bind(wx.EVT_TOOL, self.EH_Engineering, id=self.tb7.GetId())
        self.Bind(wx.EVT_TOOL, self.EH_Timing, id=self.tb8.GetId())
        self.Bind(wx.EVT_TOOL, self.EH_Exit, id=self.tb9.GetId())
        
        self.Bind(wx.EVT_TOOL, self.EH_Help, id=self.MHelp_Help.GetId())

        self.Bind(wx.EVT_TREE_KEY_DOWN, self.EH_Tree_Key_Down, self.Tree)
        self.Bind(wx.EVT_TREE_SEL_CHANGED, self.EH_Tree_Sel_Changed, self.Tree)
        self.Bind(wx.EVT_TREE_DELETE_ITEM, self.EH_Tree_Delete, self.Tree)
        self.Bind(wx.EVT_TREE_ITEM_ACTIVATED, self.EH_Tree_Activated, self.Tree)
        self.Bind(wx.EVT_TREE_END_LABEL_EDIT, self.EH_Tree_End_Edit, self.Tree)
        self.Bind(wx.EVT_TREE_BEGIN_LABEL_EDIT, self.EH_Tree_Begin_Edit, self.Tree)
        
        self.Bind(wx.EVT_TREE_ITEM_RIGHT_CLICK, self.RightClick, self.Tree)        
        
        self.Bind(wx.EVT_TEXT_ENTER, self.EH_XPATH, self.text_xpath)
        self.Bind(wx.EVT_TEXT, self.EH_TEXT, self.text_xpath)
        self.Bind(wx.grid.EVT_GRID_CMD_LABEL_LEFT_CLICK, self.EH_CLLC, self.XMLGrid)
        self.Bind(wx.grid.EVT_GRID_CMD_RANGE_SELECT, self.EH_CRSE, self.XMLGrid)
        self.Bind(wx.grid.EVT_GRID_CMD_ROW_SIZE, self.EH_CRS, self.XMLGrid)
        self.Bind(wx.grid.EVT_GRID_CMD_LABEL_RIGHT_DCLICK, self.EH_CLRDC, self.XMLGrid)
        self.Bind(wx.grid.EVT_GRID_CMD_CELL_RIGHT_DCLICK, self.EH_CRDC, self.XMLGrid)
        self.Bind(wx.grid.EVT_GRID_CMD_COL_SIZE, self.EH_CCS, self.XMLGrid)
        self.Bind(wx.grid.EVT_GRID_CMD_CELL_LEFT_CLICK, self.EH_CLC, self.XMLGrid)
        self.Bind(wx.grid.EVT_GRID_CMD_SELECT_CELL, self.EH_CSC, self.XMLGrid)
        self.Bind(wx.grid.EVT_GRID_CMD_EDITOR_CREATED, self.EH_CEC, self.XMLGrid)
        self.Bind(wx.grid.EVT_GRID_CMD_LABEL_LEFT_DCLICK, self.EH_CLLDC, self.XMLGrid)
        self.Bind(wx.grid.EVT_GRID_CMD_EDITOR_HIDDEN, self.EH_CEH, self.XMLGrid)
        self.Bind(wx.grid.EVT_GRID_CMD_LABEL_RIGHT_CLICK, self.EH_CLLDC, self.XMLGrid)
        self.Bind(wx.grid.EVT_GRID_CMD_CELL_CHANGE, self.EH_CCC, self.XMLGrid)
        self.Bind(wx.grid.EVT_GRID_CMD_CELL_LEFT_DCLICK, self.EH_CLDC, self.XMLGrid)
        self.Bind(wx.grid.EVT_GRID_CMD_CELL_RIGHT_CLICK, self.EH_CRC, self.XMLGrid)
        self.Bind(wx.grid.EVT_GRID_CMD_EDITOR_SHOWN, self.EH_CES, self.XMLGrid)
        self.Bind(wx.EVT_TEXT, self.EH_C1T, self.combo_box[0])
        self.Bind(wx.EVT_TEXT_ENTER, self.EH_C1TE, self.combo_box[0])
        self.Bind(wx.EVT_COMBOBOX, self.EH_C1, self.combo_box[0])
        self.Bind(wx.EVT_TEXT, self.EH_C2T, self.combo_box[1])
        self.Bind(wx.EVT_TEXT_ENTER, self.EH_C2TE, self.combo_box[1])
        self.Bind(wx.EVT_COMBOBOX, self.EH_C2, self.combo_box[1])
        self.Bind(wx.EVT_TEXT, self.EH_C3T, self.combo_box[2])
        self.Bind(wx.EVT_TEXT_ENTER, self.EH_C3TE, self.combo_box[2])
        self.Bind(wx.EVT_COMBOBOX, self.EH_C3, self.combo_box[2])
        self.Bind(wx.EVT_TEXT, self.EH_C4T, self.combo_box[3])
        self.Bind(wx.EVT_TEXT_ENTER, self.EH_C4TE, self.combo_box[3])
        self.Bind(wx.EVT_COMBOBOX, self.EH_C4, self.combo_box[3])
        self.Bind(wx.EVT_TEXT, self.EH_C5T, self.combo_box[4])
        self.Bind(wx.EVT_TEXT_ENTER, self.EH_C5TE, self.combo_box[4])
        self.Bind(wx.EVT_COMBOBOX, self.EH_C5, self.combo_box[4])
        self.Bind(wx.EVT_TEXT, self.EH_C6T, self.combo_box[5])
        self.Bind(wx.EVT_TEXT_ENTER, self.EH_C6TE, self.combo_box[5])
        self.Bind(wx.EVT_COMBOBOX, self.EH_C6, self.combo_box[5])
        self.Bind(wx.EVT_TEXT, self.EH_C6T, self.combo_box[6])
        self.Bind(wx.EVT_TEXT_ENTER, self.EH_C6TE, self.combo_box[6])
        self.Bind(wx.EVT_COMBOBOX, self.EH_C7, self.combo_box[6])
        self.Bind(wx.EVT_TEXT, self.EH_C8T, self.combo_box[7])
        self.Bind(wx.EVT_TEXT_ENTER, self.EH_C8TE, self.combo_box[7])
        self.Bind(wx.EVT_COMBOBOX, self.EH_C8, self.combo_box[7])
        self.Bind(wx.EVT_TEXT, self.EH_C9T, self.combo_box[8])
        self.Bind(wx.EVT_TEXT_ENTER, self.EH_C9TE, self.combo_box[8])
        self.Bind(wx.EVT_COMBOBOX, self.EH_C9, self.combo_box[8])
        self.Bind(wx.EVT_BUTTON, self.EH_Filter, self.Filter)
        self.Bind(wx.EVT_BUTTON, self.EH_Add, self.Add)
        self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGED, self.EH_TTab_Changed, self.Tree_Tabs)
        self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGING, self.EH_TTab_Changing, self.Tree_Tabs)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.EH_VS, self.Vslider)
        self.Bind(wx.EVT_COMMAND_SCROLL_ENDSCROLL, self.EH_VE, self.Vslider)
        self.Bind(wx.EVT_COMMAND_SCROLL_THUMBTRACK, self.EH_VSTT, self.Vslider)
        self.Bind(wx.EVT_COMMAND_SCROLL_PAGEDOWN, self.EH_VSPD, self.Vslider)
        self.Bind(wx.EVT_COMMAND_SCROLL_PAGEUP, self.EH_VSPU, self.Vslider)
        self.Bind(wx.EVT_COMMAND_SCROLL_LINEDOWN, self.EH_VSLD, self.Vslider)
        self.Bind(wx.EVT_COMMAND_SCROLL_TOP, self.EH_VST, self.Vslider)
        self.Bind(wx.EVT_COMMAND_SCROLL_BOTTOM, self.EH_VSB, self.Vslider)
        self.Bind(wx.EVT_COMMAND_SCROLL_LINEUP, self.EH_VSLU, self.Vslider)
        self.Bind(wx.EVT_COMMAND_SCROLL_THUMBRELEASE, self.EH_VSTR, self.Vslider)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.EH_HS, self.Hslider)
        self.Bind(wx.EVT_COMMAND_SCROLL_ENDSCROLL, self.EH_HSE, self.Hslider)
        self.Bind(wx.EVT_COMMAND_SCROLL_THUMBTRACK, self.EH_HSTT, self.Hslider)
        self.Bind(wx.EVT_COMMAND_SCROLL_PAGEDOWN, self.EH_HSPD, self.Hslider)
        self.Bind(wx.EVT_COMMAND_SCROLL_PAGEUP, self.EH_HSPU, self.Hslider)
        self.Bind(wx.EVT_COMMAND_SCROLL_LINEDOWN, self.EH_HSLD, self.Hslider)
        self.Bind(wx.EVT_COMMAND_SCROLL_TOP, self.EH_HST, self.Hslider)
        self.Bind(wx.EVT_COMMAND_SCROLL_BOTTOM, self.EH_HSB, self.Hslider)
        self.Bind(wx.EVT_COMMAND_SCROLL_LINEUP, self.EH_HSLU, self.Hslider)
        self.Bind(wx.EVT_COMMAND_SCROLL_THUMBRELEASE, self.EH_HSTR, self.Hslider)
        self.Bind(wx.EVT_TEXT_ENTER, self.EH_HSE, self.HPos)
        self.Bind(wx.EVT_TEXT, self.EH_HST, self.HPos)
        self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGED, self.EH_MTab_Changed, self.MainVert_TreeAndTabs)
        self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGING, self.EH_MTab_Changing, self.MainVert_TreeAndTabs)
        self.Bind(wx.EVT_TEXT_URL, self.EH_COU, self.Time_Left)
        self.Bind(wx.EVT_TEXT_MAXLEN, self.EH_COM, self.Time_Left)
        self.Bind(wx.EVT_TEXT_ENTER, self.EH_COE, self.Time_Left)
        self.Bind(wx.EVT_TEXT, self.EH_CO, self.Time_Left)
        # end wxGlade

    def __set_properties(self):
         
        # begin wxGlade: MGUI.__set_properties
        self.SetTitle("3G Lighting Inhancement Program")
        self.SetSize((800, 600))
        self.MainGUI_toolbar.Realize()
        self.XMLGrid.CreateGrid(17, 5)
        self.XMLGrid.SetRowLabelSize(20)
        self.XMLGrid.SetColLabelSize(20)
        self.XMLGrid.SetColLabelValue(0, "Cell")
        self.XMLGrid.SetColSize(0, 30)
        self.XMLGrid.SetColLabelValue(1, "Selected")
        self.XMLGrid.SetColLabelValue(2, "Child")
        self.XMLGrid.SetColLabelValue(3, "Attrib")
        self.XMLGrid.SetColLabelValue(4, "Value")
        self.combo_box[0].SetSelection(-1)
        self.combo_box[1].SetSelection(-1)
        self.combo_box[4].SetSelection(-1)
        self.combo_box[7].SetSelection(-1)
        self.Filter.SetMinSize((-1,20))
        self.Add.SetMinSize((-1, 20))
        self.DBAGrid.CreateGrid(10, 3)
        self.DBAGrid.SetRowLabelSize(20)
        self.DBAGrid.SetColLabelSize(20)
        self.DBAGrid.SetColLabelValue(0, "ITEMCODE")
        self.DBAGrid.SetColLabelValue(1, "DESCRIPT")
        self.DBAGrid.SetColLabelValue(2, "CATEGORY")
        self.Vslider.SetMinSize((20, -1))
        self.Hslider.SetMinSize((-1, 20))
        self.HPos.SetMinSize((100, 20))
        self.Status_Text.SetMinSize((-1,20))
        self.Progress_Top.SetMinSize((-1,10))
        self.Progress_Bottom.SetMinSize((-1, 10))
        self.Time_Left.SetMinSize((100, 20))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MGUI.__do_layout
        MainVert = wx.BoxSizer(wx.VERTICAL)
        Main_Bottom_Sizer = wx.BoxSizer(wx.HORIZONTAL)
        Progress_Sizer = wx.BoxSizer(wx.VERTICAL)
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        Tree_Sizer = wx.BoxSizer(wx.HORIZONTAL)
        Tree_Sizer.Add(self.Tree, 1, wx.EXPAND, 0)
        self.Tree_Panel.SetSizer(Tree_Sizer)
        sizer_1.Add(self.text_path, 0, wx.EXPAND, 0)
        sizer_1.Add(self.text_xpath, 0, wx.EXPAND, 0)
        sizer_1.Add(self.text_expansion, 0, wx.EXPAND, 0)
        sizer_5.Add(self.combo_box[0], 2, 0, 0)
        sizer_5.Add(self.combo_box[1], 1, 0, 0)
        sizer_5.Add(self.combo_box[2], 2, 0, 0)
        sizer_5.Add(self.combo_box[3], 2, 0, 0)
        sizer_5.Add(self.combo_box[4], 1, 0, 0)
        sizer_5.Add(self.combo_box[5], 2, 0, 0)
        sizer_5.Add(self.combo_box[6], 2, 0, 0)
        sizer_5.Add(self.combo_box[7], 1, 0, 0)
        sizer_5.Add(self.combo_box[8], 2, 0, 0)
        sizer_5.Add(self.Filter, 1, 0, 0)
        sizer_5.Add(self.Add, 1, 0, 0)
        sizer_4.Add(sizer_5, 0, wx.EXPAND, 0)
        sizer_4.Add(self.DBAGrid, 1, wx.EXPAND, 0)
        self.notebook_1_pane_2.SetSizer(sizer_4)
        
        self.Display_TABS.AddPage(self.Display_HTML, "Display")
        self.Display_TABS.AddPage(self.Display_Source, "Html")
        self.Display_TABS.AddPage(self.Display_Jinja, "Jinja")
        self.T_M.AssignImageList(self.image_list)         
        self.T_M.AddPage(self.TM_INTree, "Item-New")
        self.T_M.SetPageImage(0,self.iconITEM)
        self.T_M.AddPage(self.TM_IUTree, "Item-Update")
        self.T_M.SetPageImage(1,self.iconITEM)        
        self.T_M.AddPage(self.TM_IMTree, "Methods")
        self.T_M.SetPageImage(2,self.iconMETHOD)
        self.T_M.AddPage(self.TM_ICTree, "Components")
        self.T_M.SetPageImage(3,self.iconSUBITEM)
        self.M_T.AssignImageList(self.image_list)          
        self.M_T.AddPage(self.MT_INTree, "ItemNew")
        self.M_T.SetPageImage(0,self.iconITEM)        
        self.M_T.AddPage(self.MT_IUTree, "ItemUpdate")
        self.M_T.SetPageImage(1,self.iconITEM)         
        self.M_T.AddPage(self.MT_IMTree, "Methods")
        self.M_T.SetPageImage(2,self.iconMETHOD)          
        self.M_T.AddPage(self.MT_ICTree, "Components")
        self.M_T.SetPageImage(3,self.iconSUBITEM)
        self.Export.AssignImageList(self.image_list)      
        self.Export.AddPage(self.T_M, "T->M")
        self.Export.SetPageImage(0,self.iconTRANSFER)
        self.Export.AddPage(self.M_T, "M-T")
        self.Export.SetPageImage(1,self.iconTRANSFER)        
        self.Tree_Tabs.AssignImageList(self.image_list)        
        self.Tree_Tabs.AddPage(self.XMLGrid, "XML")
        self.Tree_Tabs.SetPageImage(0,self.iconXML)        
        self.Tree_Tabs.AddPage(self.notebook_1_pane_2, "Filter")
        self.Tree_Tabs.SetPageImage(1,self.iconHEADING)
        self.Tree_Tabs.AddPage(self.Display_TABS, "Display")
        self.Tree_Tabs.SetPageImage(2,self.icon3G)        
        self.Tree_Tabs.AddPage(self.Tree_Tabs_pane_4, "SalesOrder")
        self.Tree_Tabs.SetPageImage(3,self.icon3G)           
        self.Tree_Tabs.AddPage(self.JobTabList[0], "Jobs")
        self.Tree_Tabs.SetPageImage(4,self.icon3G)           
        self.Tree_Tabs.AddPage(self.Tree_Tabs_pane_6, "POs")
        self.Tree_Tabs.SetPageImage(5,self.icon3G)           
        self.Tree_Tabs.AddPage(self.Export, "Export")
        self.Tree_Tabs.SetPageImage(6,self.iconTRANSFER)        
        sizer_3.Add(self.Tree_Tabs, 1, wx.EXPAND, 0)
        sizer_3.Add(self.Vslider, 0, wx.EXPAND, 0)
        sizer_1.Add(sizer_3, 1, wx.EXPAND, 0)
        sizer_2.Add(self.Hslider, 1, wx.EXPAND, 0)
        sizer_2.Add(self.HPos, 0, 0, 0)
        sizer_1.Add(sizer_2, 0, wx.EXPAND | wx.ALIGN_BOTTOM, 0)

        
        self.panel_2.SetSizer(sizer_1)
        self.Tree_Items_Divider.SplitVertically(self.Tree_Panel, self.panel_2)
        self.MainVert_TreeAndTabs.AddPage(self.Tree_Items_Divider, "Main")
        self.MainVert_TreeAndTabs.AddPage(self.StatusEdit, "Status")
        self.MainVert_TreeAndTabs.AddPage(self.Event_Edit, "Event")
        self.MainVert_TreeAndTabs.AddPage(self.Error_Edit, "Errors")
        self.MainVert_TreeAndTabs.AddPage(self.Settings_Pane, "Settings")
        MainVert.Add(self.MainVert_TreeAndTabs, 1, wx.EXPAND, 0)
        MainVert.Add(self.Status_Text, 0, wx.EXPAND, 0)
        Progress_Sizer.Add(self.Progress_Top, 0, wx.EXPAND | wx.ALIGN_BOTTOM, 0)
        Progress_Sizer.Add(self.Progress_Bottom, 0, wx.EXPAND | wx.ALIGN_BOTTOM, 0)
        Main_Bottom_Sizer.Add(Progress_Sizer, 1, wx.EXPAND | wx.ALIGN_BOTTOM, 0)
        Main_Bottom_Sizer.Add(self.Time_Left, 0, wx.ALIGN_BOTTOM, 0)
        MainVert.Add(Main_Bottom_Sizer, 0, wx.EXPAND | wx.ALIGN_BOTTOM, 0)
        self.SetSizer(MainVert)
        self.Layout()
        # end wxGlade
    def OnRightClick(self, event):        
        Main.EH("EH_RightClicked", self, event)
        event.Skip()         
    def RightClick(self, event):
        Main.EH("EH_RightClick", self, event)
        event.Skip()        
#        print "got here"
#        cNode = GetCurrentXMLNode(self)
#        print cNode.display
    def OnTaskBarLeftClick(self, evt):
        exit()        
        self.tbicon.PopupMenu(self.tbicon.CreatePopupMenu())

    def EH_Help(self, event):
        Main.EH("EH_Help", self)
        event.Skip()
    def EH_OpenXML(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_OpenXML", self)
        event.Skip()

    def EH_SaveXML(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_SaveXML", self)
        event.Skip()

    def EH_OpenDBA(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_OpenDBA", self)
        event.Skip()

    def EH_Exit(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_Exit", self)
        event.Skip()

    def EV_Execute(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EV_Execute", self)
        event.Skip()

    def EH_Sales(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_Sales", self)
        event.Skip()

    def EH_Productiion(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_Productiion", self)
        event.Skip()

    def EH_Engineering(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_Engineering", self)
        event.Skip()

    def EH_Timing(self, event):  # wxGlade: MGUI.<event_handler>
        #filename =  r'C:\Users\Lief-W7\Desktop\Dropbox\Python\Work\quack.mp3'
        #print filename
        #mp3 = mp3play.load(filename)        
        #mp3.play()        
        Main.EH("EH_Timing", self)
        event.Skip()

    def EH_Execute(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_Execute", self)
        event.Skip()

    def EH_Production(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_Production", self)
        event.Skip()

    def EH_Tree_Key_Down(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_Tree_Key_Down", self)
        event.Skip()

    def EH_Tree_Sel_Changed(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_Tree_Sel_Changed", self)
        event.Skip()

    def EH_Tree_Delete(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_Tree_Delete", self)
        event.Skip()

    def EH_Tree_Activated(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_Tree_Activated", self)
        event.Skip()

    def EH_Tree_End_Edit(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_Tree_End_Edit", self)
        event.Skip()

    def EH_Tree_Begin_Edit(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_Tree_Begin_Edit", self)
        event.Skip()

    def EH_XPATH(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_XPATH", self)
        event.Skip()

    def EH_TEXT(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_TEXT", self)
        event.Skip()

    def EH_CLLC(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_CLLC", self)
        event.Skip()

    def EH_CRSE(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_CRSE", self)
        event.Skip()

    def EH_CRS(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_CRS", self)
        event.Skip()

    def EH_CLRDC(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_CLRDC", self)
        event.Skip()

    def EH_CRDC(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_CRDC", self)
        event.Skip()

    def EH_CCS(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_CCS", self)
        event.Skip()

    def EH_CLC(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_CLC", self)
        event.Skip()

    def EH_CSC(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_CSC", self)
        event.Skip()

    def EH_CEC(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_CEC", self)
        event.Skip()

    def EH_CLLDC(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_CLLDC", self)
        event.Skip()

    def EH_CEH(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_CEH", self)
        event.Skip()

    def EH_CCC(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_CCC", self)
        event.Skip()

    def EH_CLDC(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_CLDC", self)
        event.Skip()

    def EH_CRC(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_CRC", self)
        event.Skip()

    def EH_CES(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_CES", self)
        event.Skip()

    def EH_C1T(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_C1T", self)
        event.Skip()

    def EH_C1TE(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_C1TE", self)
        event.Skip()

    def EH_C1(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_C1", self)
        event.Skip()

    def EH_C2T(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_C2T", self)
        event.Skip()

    def EH_C2TE(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_C2TE", self)
        event.Skip()

    def EH_C2(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_C2", self)
        event.Skip()

    def EH_C3T(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_C3T", self)
        event.Skip()

    def EH_C3TE(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_C3TE", self)
        event.Skip()

    def EH_C3(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_C3", self)
        event.Skip()

    def EH_C4T(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_C4T", self)
        event.Skip()

    def EH_C4TE(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_C4TE", self)
        event.Skip()

    def EH_C4(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_C4", self)
        event.Skip()

    def EH_C5T(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_C5T", self)
        event.Skip()

    def EH_C5TE(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_C5TE", self)
        event.Skip()

    def EH_C5(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_C5", self)
        event.Skip()

    def EH_C6T(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_C6T", self)
        event.Skip()

    def EH_C6TE(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_C6TE", self)
        event.Skip()

    def EH_C6(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_C6", self)
        event.Skip()

    def EH_C7(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_C7", self)
        event.Skip()

    def EH_C8T(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_C8T", self)
        event.Skip()

    def EH_C8TE(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_C8TE", self)
        event.Skip()

    def EH_C8(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_C8", self)
        event.Skip()

    def EH_C9T(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_C9T", self)
        event.Skip()

    def EH_C9TE(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_C9TE", self)
        event.Skip()

    def EH_C9(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_C9", self)
        event.Skip()

    def EH_Filter(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_Filter", self)
        event.Skip()

    def EH_Add(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_Add", self)
        event.Skip()

    def EH_TTab_Changed(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_TTab_Changed", self)
        event.Skip()

    def EH_TTab_Changing(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_TTab_Changing", self)
        event.Skip()

    def EH_VS(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_VS", self)
        event.Skip()

    def EH_VE(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_VE", self)
        event.Skip()

    def EH_VSTT(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_VSTT", self)
        event.Skip()

    def EH_VSPD(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_VSPD", self)
        event.Skip()

    def EH_VSPU(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_VSPU", self)
        event.Skip()

    def EH_VSLD(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_VSLD", self)
        event.Skip()

    def EH_VST(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_VST", self)
        event.Skip()

    def EH_VSB(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_VSB", self)
        event.Skip()

    def EH_VSLU(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_VSLU", self)
        event.Skip()

    def EH_VSTR(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_VSTR", self)
        event.Skip()

    def EH_HS(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_HS", self)
        event.Skip()

    def EH_HSE(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_HSE", self)
        event.Skip()

    def EH_HSTT(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_HSTT", self)
        event.Skip()

    def EH_HSPD(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_HSPD", self)
        event.Skip()

    def EH_HSPU(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_HSPU", self)
        event.Skip()

    def EH_HSLD(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_HSLD", self)
        event.Skip()

    def EH_HST(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_HST", self)
        event.Skip()

    def EH_HSB(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_HSB", self)
        event.Skip()

    def EH_HSLU(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_HSLU", self)
        event.Skip()

    def EH_HSTR(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_HSTR", self)
        event.Skip()

    def EH_MTab_Changed(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_MTab_Changed", self)
        event.Skip()

    def EH_MTab_Changing(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_MTab_Changing", self)
        event.Skip()

    def EH_COU(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_COU", self)
        event.Skip()

    def EH_COM(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_COM", self)
        event.Skip()

    def EH_COE(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_COE", self)
        event.Skip()

    def EH_CO(self, event):  # wxGlade: MGUI.<event_handler>
        Main.EH("EH_CO", self)
        event.Skip()
        
    def SetStatus(self,Text):
        self.statusnow = time.clock()
        self.statuspassed = self.statusnow - self.statusthen
        self.statusthen = self.statusnow
        
        self.Status_Text.SetValue(Text)
        self.StatusEdit.AppendText(self.formattime(self.statuspassed) + "\n" + Text + "  ")
        #self.Status_Text.SetStyle(0,len(Text),wx.TextAttr(wx.Colour(200,80,100)))
        if Text == "Idle:":
            self.Status_Text.SetBackgroundColour("WHITE")
        else:
            self.Status_Text.SetBackgroundColour("RED")
        self.Refresh()

    def formattime( self , seconds ):
        minutes = 0
        hours = 0
        rettext = ""
        if seconds > 60:
            minutes = int(seconds/60.0)
            if minutes > 60:
                hours = int(minutes/60.0)
                rettext += str(hours) + " Hr"
                minutes = int(seconds/60.0)-hours*60
            if minutes > 0:
                rettext += " " + str(minutes) + " Min"
            seconds -= hours*60*60+minutes*60
        if seconds > 0 and hours == 0:
            rettext += " " + str(int(seconds*100)/100.0) + " Sec"
        return rettext


    def NError(self,Message):
        self.Error_Edit.AppendText( Message + "\n\n" )
        
    def NEvent(self,Text, AddToStatus = False):
        self.eventnow = time.clock()
        self.eventpassed = self.eventnow - self.eventthen
        self.eventthen = self.eventnow        
        self.Event_Edit.AppendText(self.formattime(self.eventpassed) + "\n" + Text + "  ")
        if AddToStatus:
            self.SetStatus(Text)
        
    def MsgBoxYN(self,Ttext,Message):
        dial = wx.MessageDialog(None, Message, Ttext, wx.YES_NO | wx.NO_DEFAULT | wx.ICON_QUESTION)
        return dial.ShowModal()        

    def MsgBox(self,Ttext,Message):
        dial = wx.MessageDialog(None,Message,Ttext, wx.OK)
        return dial.ShowModal()        

    def Progress1(self,Value,Range=-1):
        if Range != -1:
            self.Progress_Top.SetRange( Range )
        self.Progress_Top.SetValue( Value )
#        self.Progress_Top.Update()        
#        self.Progress_Top.Refresh()

    def Progress2(self,Value,Range=100):
        self.Progress_Bottom.SetRange( Range )
        self.Progress_Bottom.SetValue( Value )

    def OpenDBAFiles(self):
        """
        Create and show the Open FileDialog
        """
        dlg = wx.FileDialog(
        self, message="Choose a DBA file",
        defaultFile="",
        wildcard="DBA File (*.fdb)|*.fdb|All files (*.*)|*.*",
        style=wx.OPEN | wx.MULTIPLE | wx.CHANGE_DIR
        )
        paths = [ ]
        if dlg.ShowModal() == wx.ID_OK:
            paths = dlg.GetPaths()
        dlg.Destroy()            
        return paths

#    def GridUpdate( self, GridList, FB , Grid =  self.DBAGrid , NewGrid = 1):
#        self.text_path.ChangeValue( FB.path )
#        self.text_xpath.ChangeValue( FB.lastselect )

#        Gc = Grid.GetNumberCols()
#        Gr = Grid.GetNumberRows()        
#        Dc = len(GridList[0])
#        Dr = len(GridList)-1 # for titles        
#        if NewGrid == 1:
#            if Dc > Gc:
#                Grid.AppendCols(Dc-Gc)
#            elif Dc < Gc:
#                Grid.DeleteCols(0,Gc-Dc)            
#            Grid.DeleteRows(0,Gr)
#            x=0
#            for each in GridList[0]:
#                Grid.SetColLabelValue(x,each)
#                x += 1
#            if Dr > Gr:
#                Grid.AppendRows(Dr-Gr)
#            elif Dr < Gr:
#                Grid.DeleteRows(0,Gr-Dr)
#            Gr = Dr
#        else:
#            Grid.AppendRows(Dr)
#            Gr += Dr
#        x=0
#        while x < len(GridList)-1:
#            y=0
#            for each in GridList[x+1]:
#                Grid.SetCellValue(x+(Gr-Dr),y,each)
#                y += 1
#            x += 1        

    def DBAGridUpdate( self, GridList , FB , widthlist):

        self.text_path.ChangeValue( FB.path )
        self.text_xpath.ChangeValue( FB.lastselect )
        
        Gc = self.DBAGrid.GetNumberCols()
        Gr = self.DBAGrid.GetNumberRows()
        Dc = len(GridList[0])
        Dr = len(GridList)-1 # for titles

        if Dc > Gc:
            self.DBAGrid.AppendCols(Dc-Gc)
        elif Dc < Gc:
            self.DBAGrid.DeleteCols(0,Gc-Dc)

        if Dr > Gr:
            self.DBAGrid.AppendRows(Dr-Gr)
        elif Dr < Gr:
            self.DBAGrid.DeleteRows(0,Gr-Dr)

        t1 = self.combo_box[0].GetValue()
        t2 = self.combo_box[3].GetValue()
        t3 = self.combo_box[6].GetValue()
        
        self.combo_box[0].Clear()
        self.combo_box[3].Clear()
        self.combo_box[6].Clear()
        
        x=0        
        for each in GridList[0]:
            temp = self.DBAGrid
            temp.SetColLabelValue(x,each)
            temp.SetColSize(x,int(widthlist[x]))
            self.combo_box[0].Append(each)
            self.combo_box[3].Append(each)
            self.combo_box[6].Append(each)            
            x += 1
            
        self.combo_box[0].SetValue(t1)
        self.combo_box[3].SetValue(t2)
        self.combo_box[6].SetValue(t3)
        
        x=0
        while x < len(GridList)-1:
            y=0
            for each in GridList[x+1]:
                self.DBAGrid.SetCellValue(x,y,each)
                y += 1
            x += 1

    def OpenXMLFiles(self):
        """
        Create and show the Open FileDialog
        """
        dlg = wx.FileDialog(
        self, message="Choose a XML file",
        defaultFile="",
        wildcard="XML File (*.xml)|*.xml|All files (*.*)|*.*",
        style=wx.OPEN | wx.MULTIPLE | wx.CHANGE_DIR
        )
        paths = [ ]
        if dlg.ShowModal() == wx.ID_OK:
            paths = dlg.GetPaths()
        dlg.Destroy()            
        return paths

        

